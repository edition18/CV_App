[{"D:\\Javascript_TOP\\cv_app\\src\\index.js":"1","D:\\Javascript_TOP\\cv_app\\src\\App.js":"2","D:\\Javascript_TOP\\cv_app\\src\\components\\General.js":"3","D:\\Javascript_TOP\\cv_app\\src\\components\\Practical.js":"4","D:\\Javascript_TOP\\cv_app\\src\\components\\Education.js":"5"},{"size":467,"mtime":1609217493524,"results":"6","hashOfConfig":"7"},{"size":12700,"mtime":1609235722296,"results":"8","hashOfConfig":"7"},{"size":360,"mtime":1609235692029,"results":"9","hashOfConfig":"7"},{"size":595,"mtime":1609235594824,"results":"10","hashOfConfig":"7"},{"size":441,"mtime":1609235083136,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"71g17z",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Javascript_TOP\\cv_app\\src\\index.js",[],["25","26"],"D:\\Javascript_TOP\\cv_app\\src\\App.js",["27","28","29","30","31"],"import General from \"./components/General\";\nimport Education from \"./components/Education\";\nimport Practical from \"./components/Practical\";\nimport React, { useState, Fragment } from \"react\";\nimport uniqid from \"uniqid\";\n\nconst App = () => {\n  const [submitted, setSubmitted] = useState(true);\n  const [name, setName] = useState(\"Generic Person\");\n  const [email, setEmail] = useState(\"averagejoe@gmail.com\");\n  const [phone, setPhone] = useState(\"9000 6898\");\n  const [educations, setEducations] = useState([\n    {\n      school: \"Technology College\",\n      dateStarted: \"2011-12-12\",\n      dateLeft: \"2013-12-12\",\n      major: \"Technology\",\n    },\n    {\n      school: \"Business College\",\n      dateStarted: \"2014-12-12\",\n      dateLeft: \"2018-12-12\",\n      major: \"Business\",\n    },\n  ]);\n  const [practicals, setPracticals] = useState([\n    {\n      employer: \"Mikrosoft\",\n      dateStarted: \"2008-12-12\",\n      dateLeft: \"2014-12-12\",\n      achievements: [\"did this\", \"and that\", \"then this\"],\n    },\n    {\n      employer: \"Epple\",\n      dateStarted: \"2015-12-12\",\n      dateLeft: \"2018-12-12\",\n      achievements: [\n        \"did the other thing\",\n        \"and that other thing\",\n        \"then this thing\",\n      ],\n    },\n  ]);\n\n  function educationDetails(\n    school = \"\",\n    dateStarted = \"\",\n    dateLeft = \"\",\n    major = \"\"\n  ) {\n    this.school = school;\n    this.dateStarted = dateStarted;\n    this.dateLeft = dateLeft;\n    this.major = major;\n  }\n\n  function practicalDetails(\n    employer = \"\",\n    dateStarted = \"\",\n    dateLeft = \"\",\n    achievements = []\n  ) {\n    this.employer = employer;\n    this.dateStarted = dateStarted;\n    this.dateLeft = dateLeft;\n    this.achievements = achievements;\n  }\n\n  const handleGeneralChange = (e) => {\n    switch (e.target.id) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n      case \"phone\":\n        setPhone(e.target.value);\n        break;\n      case \"email\":\n        setEmail(e.target.value);\n        break;\n      default:\n        alert(\"error no such ID\");\n        break;\n    }\n  };\n\n  const toggleFormActive = (e) => {\n    e.target.innerHTML === \"Show Form\"\n      ? (e.target.innerHTML = \"Hide Form\")\n      : (e.target.innerHTML = \"Show Form\");\n    document.getElementById(\"form\").classList.contains(\"hideElement\")\n      ? document.getElementById(\"form\").classList.remove(\"hideElement\")\n      : document.getElementById(\"form\").classList.add(\"hideElement\");\n  };\n\n  const educationSubsection = (id, education) => {\n    const { school, dateStarted, dateLeft, major } = education; //destruct\n    return (\n      <Fragment key={uniqid()}>\n        <div id={id}>\n          <label>School</label>\n          <input type=\"text\" id={\"school\"} defaultValue={school}></input>\n          <label>Date Started</label>\n          <input\n            type=\"date\"\n            id={\"dateStarted\"}\n            defaultValue={dateStarted}\n          ></input>\n          <label> Date Left</label>\n          <input type=\"date\" id={\"dateLeft\"} defaultValue={dateLeft}></input>\n          <label>Major</label>\n          <input type=\"text\" id={\"major\"} defaultValue={major}></input>\n          <button className=\"btn btn-warning\" onClick={editEducation}>\n            Edit Education\n          </button>\n          <button className=\"btn btn-danger\" id={id} onClick={deleteEducation}>\n            Delete Education\n          </button>\n          <br></br>\n\n          <br></br>\n        </div>\n      </Fragment>\n    );\n  };\n\n  const practicalSubsection = (id, practical) => {\n    const { employer, dateStarted, dateLeft, achievements } = practical; //destruct\n    return (\n      <div key={uniqid()} id={id}>\n        <label>Employer</label>\n        <input type=\"text\" id={\"employer\"} defaultValue={employer}></input>\n        <label>Date Started</label>\n        <input\n          type=\"date\"\n          id={\"dateStarted\"}\n          defaultValue={dateStarted}\n        ></input>\n        <label> Date Left</label>\n        <input type=\"date\" id={\"dateLeft\"} defaultValue={dateLeft}></input>\n        <br></br>\n        <label>Achievements</label>\n        {achievements.map((achievement, index) => (\n          <div className=\"achievements\" key={uniqid()}>\n            <br></br>\n            <input\n              type=\"text\"\n              id={index}\n              className=\"form-control achievements\"\n              defaultValue={achievement}\n            ></input>\n            <button\n              className=\"btn btn-danger\"\n              id={index}\n              onClick={deleteAchievement}\n            >\n              Delete Achievement\n            </button>\n          </div>\n        ))}\n        <br></br>\n        <button className=\"btn btn-success\" onClick={addAchievement}>\n          Add Achievement\n        </button>\n        <br></br>\n      </div>\n    );\n  };\n  const addAchievement = (e) => {\n    const practicalIndex = Number(e.target.parentNode.id);\n    const newAchievement = \"\";\n    setPracticals(\n      practicals.map((practical, index) =>\n        index !== practicalIndex\n          ? practical\n          : (practical = {\n              ...practical,\n              achievements: [...practical.achievements, newAchievement],\n            })\n      )\n    );\n  };\n\n  const addPractical = () => {\n    const newPractical = new practicalDetails();\n    setPracticals([...practicals, newPractical]);\n    // since it was an array of educations, we need to set it as an array as well\n  };\n\n  const deleteAchievement = (e) => {\n    let parentNodeIndex = Number(e.target.parentNode.id);\n    let achievementIndex = Number(e.target.id);\n\n    setPracticals(\n      practicals.map((practical) =>\n        practicals.indexOf(practical) !== parentNodeIndex\n          ? practical\n          : (practical = {\n              ...practical,\n              achievements: practical.achievements.filter(\n                (achievement, index) => index !== achievementIndex\n              ),\n            })\n      )\n    );\n  };\n\n  const handleEducationChange = (e) => {\n    const educationsIndex = Number(e.target.parentNode.id);\n    const propName = e.target.id;\n    console.log(educations);\n\n    // setEducations(\n    //   educations.map((education, index) =>\n    //     index !== educationsIndex\n    //       ? education\n    //       : (education = { ...education, school: e.target.value })\n    //   )\n    // );\n    console.log(educations);\n  };\n\n  const editEducation = (e) => {\n    let index = Number(e.target.parentNode.id);\n    const childNodes = e.target.parentNode.childNodes;\n    const updatedEducation = new educationDetails();\n\n    // new educationDetails()\n    for (let i = 0; i < childNodes.length; i++) {\n      if (childNodes[i].tagName === \"INPUT\") {\n        updatedEducation[childNodes[i].id] = childNodes[i].value;\n      }\n    }\n\n    setEducations(\n      educations.map((education) =>\n        educations.indexOf(education) === index ? updatedEducation : education\n      )\n    );\n  };\n\n  const deleteEducation = (e) => {\n    setEducations(\n      educations.filter(\n        (education, index) => index !== Number(e.target.id)\n        // strict equivalence, need to convert e.target.id to integer!\n      )\n    );\n  };\n\n  const addEducation = () => {\n    const newEducation = new educationDetails(\"\", \"\", \"\", \"\");\n    setEducations([...educations, newEducation]);\n    // since it was an array of educations, we need to set it as an array as well\n  };\n\n  const checkEducations = () => {\n    console.log(educations);\n  };\n\n  const checkPracticals = () => {\n    console.log(practicals);\n  };\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    let newEducationArray = [];\n    //educations\n    //create a educationDetail for each index in educations\n    for (let i = 0; i < educations.length; i++) {\n      newEducationArray.push(new educationDetails());\n    }\n\n    const educationsChildNodes = document.getElementById(\"educations\")\n      .childNodes;\n    for (let i = 0; i < educationsChildNodes.length; i++) {\n      const educationsSubdiv = educationsChildNodes[i].childNodes;\n      for (let x = 0; x < educationsSubdiv.length; x++) {\n        if (educationsSubdiv[x].tagName !== \"INPUT\") {\n        } else {\n          newEducationArray[i][educationsSubdiv[x].id] =\n            educationsSubdiv[x].value;\n        }\n      }\n    }\n\n    setEducations(newEducationArray);\n    // document.getElementById(\"educations\").childNodes;\n\n    //\n    //practicals\n    // create a educationDetail for each index in practicals\n\n    let newPracticalArray = [];\n    for (let i = 0; i < practicals.length; i++) {\n      newPracticalArray.push(new practicalDetails());\n    }\n\n    const practicalsChildNodes = document.getElementById(\"practicals\")\n      .childNodes;\n    for (let i = 0; i < practicalsChildNodes.length; i++) {\n      const practicalSubdiv = practicalsChildNodes[i].childNodes;\n      for (let x = 0; x < practicalSubdiv.length; x++) {\n        if (practicalSubdiv[x].tagName !== \"INPUT\") {\n          if (practicalSubdiv[x].tagName === \"DIV\") {\n            const subdivAchievements = practicalSubdiv[x].childNodes;\n            for (let y = 0; y < subdivAchievements.length; y++) {\n              if (subdivAchievements[y].tagName === \"INPUT\") {\n                newPracticalArray[i].achievements.push(\n                  subdivAchievements[y].value\n                );\n              }\n            }\n          }\n        } else {\n          newPracticalArray[i][practicalSubdiv[x].id] =\n            practicalSubdiv[x].value;\n        }\n      }\n    }\n    setPracticals(newPracticalArray);\n    // if element include className achievements go into it and loop out the achievements\n    // document.getElementById(\"practicals\").childNodes;\n  };\n\n  //defaultValue allows u to still write in the input field if you have no onChange attributes\n  const form = (\n    <Fragment>\n      <button onClick={toggleFormActive}>Show Form</button>\n      <form id=\"form\" className=\"hideElement\" onSubmit={submitForm}>\n        {/* general section */}\n        <h1>General Information</h1>\n        <div className=\"formgroup\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            required\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            placeholder=\"type your name\"\n            onChange={handleGeneralChange}\n            defaultValue={name}\n          ></input>\n        </div>\n        <div className=\"formgroup\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            required\n            type=\"email\"\n            className=\"form-control\"\n            id=\"email\"\n            placeholder=\"type your email\"\n            onChange={handleGeneralChange}\n            defaultValue={email}\n          ></input>\n        </div>\n        <div className=\"formgroup\">\n          <label htmlFor=\"phone\">Phone</label>\n          <input\n            required\n            type=\"text\"\n            className=\"form-control\"\n            id=\"phone\"\n            placeholder=\"type your phone\"\n            onChange={handleGeneralChange}\n            defaultValue={phone}\n          ></input>\n        </div>\n        {/* educations section */}\n        <br></br>\n        <h1>Education</h1>\n        <div id=\"educations\">\n          {educations\n            ? educations.map((education, index) =>\n                educationSubsection(index, education)\n              )\n            : \"\"}\n        </div>\n        <button className=\"btn btn-primary\" onClick={addEducation}>\n          Add New Education\n        </button>\n        <br></br>\n\n        <br></br>\n        <h1>Practical Experience</h1>\n        <div id=\"practicals\">\n          {practicals\n            ? practicals.map((practical, index) =>\n                practicalSubsection(index, practical)\n              )\n            : \"\"}\n          <button className=\"btn btn-primary\" onClick={addPractical}>\n            Add New Practical\n          </button>\n        </div>\n\n        <br></br>\n        <br></br>\n        <button type=\"submit\">Submit Form</button>\n      </form>\n    </Fragment>\n  );\n\n  const toggle = (e) => {\n    console.log(e.target.value);\n    e.target.innerHTML = \"new\";\n  };\n\n  return (\n    <div>\n      {form}\n      <button onClick={checkEducations}>Check Educations</button>\n      <button onClick={checkPracticals}>Check Practicals</button>\n      {submitted === false ? (\n        \"\"\n      ) : (\n        <div className=\"shadow p-3 mb-5 bg-light rounded\">\n          <General name={name} email={email} phone={phone} />\n          {educations.map((education) => (\n            <Education key={uniqid()} education={education} />\n          ))}\n          {practicals.map((practical) => (\n            <Practical key={uniqid()} practical={practical} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","D:\\Javascript_TOP\\cv_app\\src\\components\\General.js",["32","33"],"import React, { useState, Fragment } from \"react\";\r\n\r\nconst General = (props) => {\r\n  const { name, email, phone } = props;\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 inlineBlock\">{name}</h1>\r\n      <div className=\"floatRight\">\r\n        <div>{phone}</div>\r\n        <div>{email}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default General;\r\n","D:\\Javascript_TOP\\cv_app\\src\\components\\Practical.js",[],"D:\\Javascript_TOP\\cv_app\\src\\components\\Education.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":8,"column":21,"nodeType":"40","messageId":"41","endLine":8,"endColumn":33},{"ruleId":"38","severity":1,"message":"42","line":207,"column":9,"nodeType":"40","messageId":"41","endLine":207,"endColumn":30},{"ruleId":"38","severity":1,"message":"43","line":208,"column":11,"nodeType":"40","messageId":"41","endLine":208,"endColumn":26},{"ruleId":"38","severity":1,"message":"44","line":209,"column":11,"nodeType":"40","messageId":"41","endLine":209,"endColumn":19},{"ruleId":"38","severity":1,"message":"45","line":403,"column":9,"nodeType":"40","messageId":"41","endLine":403,"endColumn":15},{"ruleId":"38","severity":1,"message":"46","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"47","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":35},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'setSubmitted' is assigned a value but never used.","Identifier","unusedVar","'handleEducationChange' is assigned a value but never used.","'educationsIndex' is assigned a value but never used.","'propName' is assigned a value but never used.","'toggle' is assigned a value but never used.","'useState' is defined but never used.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]