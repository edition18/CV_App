{"version":3,"sources":["components/General.js","components/Education.js","components/Practical.js","App.js","index.js"],"names":["General","props","name","email","phone","className","Education","education","school","dateLeft","dateStarted","major","Practical","practical","employer","achievements","map","achievement","App","useState","submitted","setName","setEmail","setPhone","educations","setEducations","practicals","setPracticals","educationDetails","this","practicalDetails","handleGeneralChange","e","target","id","value","alert","addAchievement","practicalIndex","Number","parentNode","index","deleteAchievement","parentNodeIndex","achievementIndex","indexOf","filter","editEducation","childNodes","updatedEducation","i","length","tagName","deleteEducation","form","onClick","innerHTML","document","getElementById","classList","contains","remove","add","onSubmit","preventDefault","newEducationArray","push","educationsChildNodes","educationsSubdiv","x","newPracticalArray","practicalsChildNodes","practicalSubdiv","subdivAchievements","y","htmlFor","required","type","placeholder","onChange","defaultValue","uniqid","educationSubsection","newEducation","practicalSubsection","newPractical","console","log","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e527e72.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\n\r\nconst General = (props) => {\r\n  const { name, email, phone } = props;\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 inlineBlock\">{name}</h1>\r\n      <div className=\"floatRight\">\r\n        <div>{phone}</div>\r\n        <div>{email}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default General;\r\n","import React from \"react\";\r\n\r\nconst Education = (props) => {\r\n  const { school, dateLeft, dateStarted, major } = props.education;\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-5 inlineBlock\">\r\n        {school}\r\n        {\" - \"}\r\n        {major}\r\n      </h1>\r\n      <small className=\"text-muted floatRight\">\r\n        {dateStarted}\r\n        {\" - \"}\r\n        {dateLeft}\r\n      </small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Education;\r\n","import React from \"react\";\r\n\r\nconst Practical = (props) => {\r\n  const { employer, dateStarted, dateLeft, achievements } = props.practical;\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-5 inlineBlock\">{employer}</h1>\r\n      <small className=\"text-muted floatRight\">\r\n        {dateStarted}\r\n        {\" - \"}\r\n        {dateLeft}\r\n      </small>\r\n\r\n      <div>\r\n        {achievements.map((achievement) => (\r\n          <div>\r\n            <i className=\"fas fa-angle-right fa-lg\"></i> {achievement}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Practical;\r\n","import General from \"./components/General\";\nimport Education from \"./components/Education\";\nimport Practical from \"./components/Practical\";\nimport React, { useState, Fragment } from \"react\";\nimport uniqid from \"uniqid\";\n\nconst App = () => {\n  const [submitted, setSubmitted] = useState(true);\n  const [name, setName] = useState(\"Generic Person\");\n  const [email, setEmail] = useState(\"averagejoe@gmail.com\");\n  const [phone, setPhone] = useState(\"9000 6898\");\n  const [educations, setEducations] = useState([\n    {\n      school: \"Technology College\",\n      dateStarted: \"2011-12-12\",\n      dateLeft: \"2013-12-12\",\n      major: \"Technology\",\n    },\n    {\n      school: \"Business College\",\n      dateStarted: \"2014-12-12\",\n      dateLeft: \"2018-12-12\",\n      major: \"Business\",\n    },\n  ]);\n  const [practicals, setPracticals] = useState([\n    {\n      employer: \"Mikrosoft\",\n      dateStarted: \"2008-12-12\",\n      dateLeft: \"2014-12-12\",\n      achievements: [\"did this\", \"and that\", \"then this\"],\n    },\n    {\n      employer: \"Epple\",\n      dateStarted: \"2015-12-12\",\n      dateLeft: \"2018-12-12\",\n      achievements: [\n        \"did the other thing\",\n        \"and that other thing\",\n        \"then this thing\",\n      ],\n    },\n  ]);\n\n  function educationDetails(\n    school = \"\",\n    dateStarted = \"\",\n    dateLeft = \"\",\n    major = \"\"\n  ) {\n    this.school = school;\n    this.dateStarted = dateStarted;\n    this.dateLeft = dateLeft;\n    this.major = major;\n  }\n\n  function practicalDetails(\n    employer = \"\",\n    dateStarted = \"\",\n    dateLeft = \"\",\n    achievements = []\n  ) {\n    this.employer = employer;\n    this.dateStarted = dateStarted;\n    this.dateLeft = dateLeft;\n    this.achievements = achievements;\n  }\n\n  const handleGeneralChange = (e) => {\n    switch (e.target.id) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n      case \"phone\":\n        setPhone(e.target.value);\n        break;\n      case \"email\":\n        setEmail(e.target.value);\n        break;\n      default:\n        alert(\"error no such ID\");\n        break;\n    }\n  };\n\n  const toggleFormActive = (e) => {\n    e.target.innerHTML === \"Show Form\"\n      ? (e.target.innerHTML = \"Hide Form\")\n      : (e.target.innerHTML = \"Show Form\");\n    document.getElementById(\"form\").classList.contains(\"hideElement\")\n      ? document.getElementById(\"form\").classList.remove(\"hideElement\")\n      : document.getElementById(\"form\").classList.add(\"hideElement\");\n  };\n\n  const educationSubsection = (id, education) => {\n    const { school, dateStarted, dateLeft, major } = education; //destruct\n    return (\n      <Fragment key={uniqid()}>\n        <div id={id}>\n          <label>School</label>\n          <input type=\"text\" id={\"school\"} defaultValue={school}></input>\n          <label>Date Started</label>\n          <input\n            type=\"date\"\n            id={\"dateStarted\"}\n            defaultValue={dateStarted}\n          ></input>\n          <label> Date Left</label>\n          <input type=\"date\" id={\"dateLeft\"} defaultValue={dateLeft}></input>\n          <label>Major</label>\n          <input type=\"text\" id={\"major\"} defaultValue={major}></input>\n          <button className=\"btn btn-warning\" onClick={editEducation}>\n            Edit Education\n          </button>\n          <button className=\"btn btn-danger\" id={id} onClick={deleteEducation}>\n            Delete Education\n          </button>\n          <br></br>\n\n          <br></br>\n        </div>\n      </Fragment>\n    );\n  };\n\n  const practicalSubsection = (id, practical) => {\n    const { employer, dateStarted, dateLeft, achievements } = practical; //destruct\n    return (\n      <div key={uniqid()} id={id}>\n        <label>Employer</label>\n        <input type=\"text\" id={\"employer\"} defaultValue={employer}></input>\n        <label>Date Started</label>\n        <input\n          type=\"date\"\n          id={\"dateStarted\"}\n          defaultValue={dateStarted}\n        ></input>\n        <label> Date Left</label>\n        <input type=\"date\" id={\"dateLeft\"} defaultValue={dateLeft}></input>\n        <br></br>\n        <label>Achievements</label>\n        {achievements.map((achievement, index) => (\n          <div className=\"achievements\" key={uniqid()}>\n            <br></br>\n            <input\n              type=\"text\"\n              id={index}\n              className=\"form-control achievements\"\n              defaultValue={achievement}\n            ></input>\n            <button\n              className=\"btn btn-danger\"\n              id={index}\n              onClick={deleteAchievement}\n            >\n              Delete Achievement\n            </button>\n          </div>\n        ))}\n        <br></br>\n        <button className=\"btn btn-success\" onClick={addAchievement}>\n          Add Achievement\n        </button>\n        <br></br>\n      </div>\n    );\n  };\n  const addAchievement = (e) => {\n    const practicalIndex = Number(e.target.parentNode.id);\n    const newAchievement = \"\";\n    setPracticals(\n      practicals.map((practical, index) =>\n        index !== practicalIndex\n          ? practical\n          : (practical = {\n              ...practical,\n              achievements: [...practical.achievements, newAchievement],\n            })\n      )\n    );\n  };\n\n  const addPractical = () => {\n    const newPractical = new practicalDetails();\n    setPracticals([...practicals, newPractical]);\n    // since it was an array of educations, we need to set it as an array as well\n  };\n\n  const deleteAchievement = (e) => {\n    let parentNodeIndex = Number(e.target.parentNode.id);\n    let achievementIndex = Number(e.target.id);\n\n    setPracticals(\n      practicals.map((practical) =>\n        practicals.indexOf(practical) !== parentNodeIndex\n          ? practical\n          : (practical = {\n              ...practical,\n              achievements: practical.achievements.filter(\n                (achievement, index) => index !== achievementIndex\n              ),\n            })\n      )\n    );\n  };\n\n  const handleEducationChange = (e) => {\n    const educationsIndex = Number(e.target.parentNode.id);\n    const propName = e.target.id;\n    console.log(educations);\n\n    // setEducations(\n    //   educations.map((education, index) =>\n    //     index !== educationsIndex\n    //       ? education\n    //       : (education = { ...education, school: e.target.value })\n    //   )\n    // );\n    console.log(educations);\n  };\n\n  const editEducation = (e) => {\n    let index = Number(e.target.parentNode.id);\n    const childNodes = e.target.parentNode.childNodes;\n    const updatedEducation = new educationDetails();\n\n    // new educationDetails()\n    for (let i = 0; i < childNodes.length; i++) {\n      if (childNodes[i].tagName === \"INPUT\") {\n        updatedEducation[childNodes[i].id] = childNodes[i].value;\n      }\n    }\n\n    setEducations(\n      educations.map((education) =>\n        educations.indexOf(education) === index ? updatedEducation : education\n      )\n    );\n  };\n\n  const deleteEducation = (e) => {\n    setEducations(\n      educations.filter(\n        (education, index) => index !== Number(e.target.id)\n        // strict equivalence, need to convert e.target.id to integer!\n      )\n    );\n  };\n\n  const addEducation = () => {\n    const newEducation = new educationDetails(\"\", \"\", \"\", \"\");\n    setEducations([...educations, newEducation]);\n    // since it was an array of educations, we need to set it as an array as well\n  };\n\n  const checkEducations = () => {\n    console.log(educations);\n  };\n\n  const checkPracticals = () => {\n    console.log(practicals);\n  };\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    let newEducationArray = [];\n    //educations\n    //create a educationDetail for each index in educations\n    for (let i = 0; i < educations.length; i++) {\n      newEducationArray.push(new educationDetails());\n    }\n\n    const educationsChildNodes = document.getElementById(\"educations\")\n      .childNodes;\n    for (let i = 0; i < educationsChildNodes.length; i++) {\n      const educationsSubdiv = educationsChildNodes[i].childNodes;\n      for (let x = 0; x < educationsSubdiv.length; x++) {\n        if (educationsSubdiv[x].tagName !== \"INPUT\") {\n        } else {\n          newEducationArray[i][educationsSubdiv[x].id] =\n            educationsSubdiv[x].value;\n        }\n      }\n    }\n\n    setEducations(newEducationArray);\n    // document.getElementById(\"educations\").childNodes;\n\n    //\n    //practicals\n    // create a educationDetail for each index in practicals\n\n    let newPracticalArray = [];\n    for (let i = 0; i < practicals.length; i++) {\n      newPracticalArray.push(new practicalDetails());\n    }\n\n    const practicalsChildNodes = document.getElementById(\"practicals\")\n      .childNodes;\n    for (let i = 0; i < practicalsChildNodes.length; i++) {\n      const practicalSubdiv = practicalsChildNodes[i].childNodes;\n      for (let x = 0; x < practicalSubdiv.length; x++) {\n        if (practicalSubdiv[x].tagName !== \"INPUT\") {\n          if (practicalSubdiv[x].tagName === \"DIV\") {\n            const subdivAchievements = practicalSubdiv[x].childNodes;\n            for (let y = 0; y < subdivAchievements.length; y++) {\n              if (subdivAchievements[y].tagName === \"INPUT\") {\n                newPracticalArray[i].achievements.push(\n                  subdivAchievements[y].value\n                );\n              }\n            }\n          }\n        } else {\n          newPracticalArray[i][practicalSubdiv[x].id] =\n            practicalSubdiv[x].value;\n        }\n      }\n    }\n    setPracticals(newPracticalArray);\n    // if element include className achievements go into it and loop out the achievements\n    // document.getElementById(\"practicals\").childNodes;\n  };\n\n  //defaultValue allows u to still write in the input field if you have no onChange attributes\n  const form = (\n    <Fragment>\n      <button onClick={toggleFormActive}>Show Form</button>\n      <form id=\"form\" className=\"hideElement\" onSubmit={submitForm}>\n        {/* general section */}\n        <h1>General Information</h1>\n        <div className=\"formgroup\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            required\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            placeholder=\"type your name\"\n            onChange={handleGeneralChange}\n            defaultValue={name}\n          ></input>\n        </div>\n        <div className=\"formgroup\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            required\n            type=\"email\"\n            className=\"form-control\"\n            id=\"email\"\n            placeholder=\"type your email\"\n            onChange={handleGeneralChange}\n            defaultValue={email}\n          ></input>\n        </div>\n        <div className=\"formgroup\">\n          <label htmlFor=\"phone\">Phone</label>\n          <input\n            required\n            type=\"text\"\n            className=\"form-control\"\n            id=\"phone\"\n            placeholder=\"type your phone\"\n            onChange={handleGeneralChange}\n            defaultValue={phone}\n          ></input>\n        </div>\n        {/* educations section */}\n        <br></br>\n        <h1>Education</h1>\n        <div id=\"educations\">\n          {educations\n            ? educations.map((education, index) =>\n                educationSubsection(index, education)\n              )\n            : \"\"}\n        </div>\n        <button className=\"btn btn-primary\" onClick={addEducation}>\n          Add New Education\n        </button>\n        <br></br>\n\n        <br></br>\n        <h1>Practical Experience</h1>\n        <div id=\"practicals\">\n          {practicals\n            ? practicals.map((practical, index) =>\n                practicalSubsection(index, practical)\n              )\n            : \"\"}\n          <button className=\"btn btn-primary\" onClick={addPractical}>\n            Add New Practical\n          </button>\n        </div>\n\n        <br></br>\n        <br></br>\n        <button type=\"submit\">Submit Form</button>\n      </form>\n    </Fragment>\n  );\n\n  const toggle = (e) => {\n    console.log(e.target.value);\n    e.target.innerHTML = \"new\";\n  };\n\n  return (\n    <div>\n      {form}\n      <button onClick={checkEducations}>Check Educations</button>\n      <button onClick={checkPracticals}>Check Practicals</button>\n      {submitted === false ? (\n        \"\"\n      ) : (\n        <div className=\"shadow p-3 mb-5 bg-light rounded\">\n          <General name={name} email={email} phone={phone} />\n          {educations.map((education) => (\n            <Education key={uniqid()} education={education} />\n          ))}\n          {practicals.map((practical) => (\n            <Practical key={uniqid()} practical={practical} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\nimport \"@fortawesome/fontawesome-free/js/fontawesome\";\nimport \"@fortawesome/fontawesome-free/js/solid\";\nimport \"@fortawesome/fontawesome-free/js/regular\";\nimport \"@fortawesome/fontawesome-free/js/brands\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}